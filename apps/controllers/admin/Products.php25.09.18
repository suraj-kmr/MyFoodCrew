<?php
class Products extends MY_Controller{
    public function __construct(){
        parent::__construct();
		//SET @@GLOBAL connect_timeout=300;
        $this -> load -> model('Product_model');
        //$this -> load -> model('Mobile_model');
        $this -> load -> model('Media_model');
        $this -> data['active_tabs'] = "electronics";
        $role = $this -> session -> userdata('role');
        if(!$role==1){
            redirect(admin_url('users/login'));
        }
    }

    function bulksave(){
        $url = admin_url('products');
        if($this -> input -> post('frmall')) {
            $url = $this -> input -> post('url');
            $pids = $this -> input -> post('pid');
            $ship = $this -> input -> post('ship');
            $qty = $this -> input -> post('qty');
			$off = $this -> input -> post('offer');
			$sequence = $this -> input -> post('sequence');
            foreach($pids as $id => $val){
                $item = array();
                $item['id'] = $id;
                $item['sale_price'] = $val;
                $item['ship_charge'] = $ship[$id];
                $item['qty'] = $qty[$id];
				$item['offer'] = $off[$id];
				$item['sequence'] = $sequence[$id];
                $this -> Product_model -> save($item);
            }
            $this -> session -> set_flashdata("success", "Bulk Details Updated");
        }
        redirect($url);
    }

    function index(){
		$show_per_page = isset($_GET['show_page']) ? $_GET['show_page'] : 100;
        $page = isset($_GET['page']) ? $_GET['page'] : 1;
       
        $offset = ($page - 1 ) * $show_per_page;
        $this -> data['main'] = admin_view('products/index');
        $status = isset($_GET['status']) ? $_GET['status'] : 'all';
        $rule = array();
        if($status == 'active'){
            $rule['status'] = 1;
            $data	= $this -> Product_model -> getWherePtype($show_per_page, $offset, $rule, 5);
        }elseif($status == 'inactive'){
            $rule['status'] = 0;
            $data	= $this -> Product_model -> getWherePtype($show_per_page, $offset, $rule, 5);
        }else{
            $data	= $this -> Product_model -> getWherePtype($show_per_page, $offset,'', 5);
        }

        $this -> data['filter_status'] = $status;
        $this -> data['q'] = '';
        if($this -> input -> get('btnsearch')){
            $q = $this -> input -> get('q');
            if($q <> ''){
                $likes = array(
                    'ptitle' => $q, 'id' => $q, 'sku' => $q
                );
                $data = $this -> Product_model -> getAllSearchedWhere($offset, $show_per_page, $likes);
                $this -> data['q'] = $q;
            }
        }

        $this -> data['products'] = $data['results'];
        $config['base_url'] 	 = admin_url('products/index');
        $config['num_links'] 	 = 2;
        $config['uri_segment']	 = 4;
        $config['total_rows']	 = $data['total'];
        $config['per_page'] 	 = $show_per_page;
        $config['full_tag_open'] = '<ul class="pagination pagination-sm">';
        $config['full_tag_close']= '</ul>';
        $config['num_tag_open']  = '<li>';
        $config['num_tag_close'] = '</li>';
        $config['first_link'] 	 = 'First';
        $config['first_tag_open']= '<li>';
        $config['first_tag_close']= '</li>';
        $config['last_link'] 	 = 'Last';
        $config['last_tag_open'] = '<li>';
        $config['last_tag_close']= '</li>';
        $config['prev_link'] 	 = 'Prev';
        $config['prev_tag_open'] = '<li>';
        $config['prev_tag_close']= '</li>';
        $config['next_link'] 	 = 'Next';
        $config['next_tag_open'] = '<li>';
        $config['next_tag_close']= '</li>';
        $config['cur_tag_open']	 = '<li class="active"><a href="#">';
        $config['cur_tag_close'] = '</a></li>';
        $config['use_page_numbers'] = true;
        $config['page_query_string'] = true;
        $config['query_string_segment'] = 'page';
        $config['reuse_query_string'] = true;

        $this->pagination->initialize($config);

        $this -> data['paginate'] 	=  $this->pagination->create_links();

        $this -> data['categories'] = $data['results'];
        $this->load->view(admin_view('default'), $this -> data);
    }

    function designs($id = false){
        $this -> data['main'] = admin_view('products/design-index');
        $this -> data['d'] = $this -> Master_model -> getNew('designs');
        if($id){
            $this -> data['d'] = $this -> Master_model -> getRow($id, 'designs');
        }
        if($id == false){
            $this -> form_validation -> set_rules('frm[design]', 'Design', 'required|is_unique[designs.design]');
        }else{
            $this -> form_validation -> set_rules('frm[design]', 'Design', 'required');
        }
        if($this -> form_validation -> run()){
            $d = $this -> input -> post('frm');
            $d['id'] = $id;
            $this -> Master_model -> save($d, 'designs');
            $this -> session -> set_flashdata("success", "Design Saved");
            redirect(admin_url('products/designs'));
        }
        $this -> data['designs']= $this -> Master_model -> listAll('designs');
        $this->load->view(admin_view('default'), $this -> data);
    }

    function server_image_upload($fileTo, $fileFrom)
    {

        $ftp_server = "images-aldivo.com";
        $ftp_user = "aldivoimages";
        $ftp_password = "Booklele@#123";
        $conn = ftp_connect($ftp_server) or die ("Cannot connect to host");
        if (@ftp_login($conn, $ftp_user, $ftp_password)) {
            ftp_pasv($conn, true);
            $uploaded = ftp_put($conn, $fileTo, $fileFrom, FTP_BINARY);
            ftp_close($conn);
            if($uploaded){
                echo "success";
            }
            else{
                echo "fail";
            }
        } else {
            return "Couldn't connect as $ftp_user\n";
        }
    }

    function add($id = false){
        $this -> data['main'] = admin_view('products/add');
        $this -> data['dashboard_title'] = ($id == false) ? "Add Products" : "Edit Products";
        $this -> data['categories']		= $this -> Category_model -> get_categories_tierd();
        $this -> data['category']     = $this -> Category_model -> category_dropdown();
        $this -> data['gift'] = $this -> Master_model -> listAllWhere('categories', array('parent_id'=>102));
       // $this -> data['brands'] = $this -> Mobile_model -> allBrands();
        //$this -> data['m'] = $this -> Mobile_model -> addMobile();
        $this -> data['images'] = $this -> Media_model -> allimages();
        $this -> data['p'] = $this -> Product_model -> getNew();
        //$this -> data['arr_designs'] = $this -> Master_model -> listAll('designs');
        if($id){
            $detail = $this -> db-> get_where('products',array('id'=>$id)) -> row();
            if($detail -> product_type == 1){
                $this -> data['brands'] = $this -> db -> get('cloths_brand') ->result();
            }
            if($detail -> product_type == 2){
                $this -> data['brands'] = $this -> db -> get('grocery_brand') -> result();
            }
            $this -> data['units'] = $this->db->get_where('units',array('pid'=>$id))->result();
            $this -> data['p'] = $this -> Product_model -> getProduct($id);
            $this -> data['categories']	= $this -> Category_model -> get_categories_tierd(0,$this->data['p']->product_type);
        }

        $this -> form_validation -> set_rules('frm[ptitle]', 'Product Title', 'required');
        // $this -> form_validation -> set_rules('frm[product_type]', 'Product Type', 'required');
        if($this -> form_validation -> run()){
            $p = $this -> input -> post('frm');
            $p['id'] = $id;
            $p['gallery'] = $this -> input -> post('img_selected');
            $p['available'] = $this -> input -> post('frm[available]') ? 1 : 0;
            $p['discount'] = $this -> input -> post('frm[discount]') ? 1 : 0;
            $p['cod_available'] = $this -> input -> post('cod_available') ? 1 : 0;

            $config = array();
            //$config['upload_path'] = upload_dir();
            $config['upload_path'] = 'img/uploads/';
            $config['allowed_types'] = 'png|jpg|jpeg|gif';
            $config['max_size'] = 3000;
            $config['remove_spaces'] = TRUE;
            $this->load->library('upload', $config);

            if($_FILES['cover_image']['name'] != ''){

                $uploaded = $this -> upload -> do_upload('cover_image');
                if($uploaded){
                    $image = $this -> upload -> data();
                    $p['image'] = site_url(upload_dir($image['file_name']));
                    $image = site_url(upload_dir($image['file_name']));
                }
            }
            else{
                $image = $this -> input -> post('txt_image1');
            }

            if($_FILES['image1']['name'] !='') {
                $uploaded1 = $this->upload->do_upload('image1');
                if ($uploaded1) {
                    $image1 = $this->upload->data();
                    $image1 = site_url(upload_dir($image1['file_name']));
                }
            }
            else{
                $image1 = $this -> input -> post('txt_image2');
            }
            if($_FILES['image2']['name'] != '') {
                $uploaded2 = $this->upload->do_upload('image2');
                if ($uploaded2) {
                    $image2 = $this->upload->data();
                    $image2 = site_url(upload_dir($image2['file_name']));
                }
            }
            else{
                $image2 = $this -> input -> post('txt_image3');
            }
            if($_FILES['image3']['name']) {
                $uploaded3 = $this->upload->do_upload('image3');
                if ($uploaded3) {
                    $image3 = $this->upload->data();
                    $image3 = site_url(upload_dir($image3['file_name']));
                }
            }
            else{
                $image3 = $this -> input -> post('txt_image4');
            }

            $p['image'] = $image;
            $p['gallery'] = $image.','.$image1 . ',' . $image2 . ',' . $image3;

            $slug = $p['slug'];
            if(empty($slug) || $slug=='')
            {
                $slug = $p['ptitle'];
            }
            $slug	= strtolower(url_title($slug));
            $p['slug'] = $this -> Product_model -> get_unique_url($slug, $id);

            if($this -> input -> post('sizes')){
                $p['sizes'] = json_encode($this -> input -> post('sizes'));
            }
            if($this -> input -> post('params')){
                $p['params'] = json_encode($this -> input -> post('params'));
            }

            $id = $this -> Product_model -> save($p);
            $this->db->where('pid',$id);
            $this->db->delete('units');
           // echo $this->db->last_query();die;
	    if($this -> input -> post('product_type') == 4){
            $total  = count($this -> input -> post('units'));
            $units = $this -> input -> post('units');
            $unit_price = $this -> input -> post('unit_price');
            for($i=0;$i<$total;$i++){
                if(@isset($units[$i])){
                    $arr = array(
                        'units'=>$units[$i],
                        'unit_price'=>$unit_price[$i],
                        'pid'=>$id
                    );
                    $this->db->insert('units',$arr);
                }
            }
	    }
            if($this -> input -> post('cats')){
                $cats = $this -> input -> post('cats');
                $this -> Product_model -> resetCategory($id, $cats);
            }
            $this -> session -> set_flashdata("success", "Product saved successfully");
            redirect(admin_url('products/add/'. $id));
        }

        $this -> load -> view(admin_view('default'), $this -> data);
    }

    function package(){
        $this -> data['main'] = admin_view('products/package');
           $this -> data['pack'] = $this->db->get('package')->result();
        $this -> load -> view(admin_view('default'), $this -> data);
    }



 function create_package($id=false){

        $config['upload_path']      = 'img/uploads';
        $config['allowed_types']    = 'gif|jpg|png|jpeg|bmp';
        $config['max_size']         = '5000';
        $config['max_width']        = '3000';
        $config['max_height']       = '2000';
        $this->load->library('upload', $config);
        $this -> data['main'] = admin_view('products/create_package');
        $this -> data['product'] = $this -> db -> get('products')->result();
        $this -> data['m'] = $this -> Master_model -> getNew('package');
        if($id){
            $this -> data['m'] = $this -> Master_model -> getRow($id, 'package');
        }
        $this -> form_validation -> set_rules('frm[name]', 'Name', 'required');
        if($this -> form_validation -> run()){
            $m = $this -> input -> post('frm');
            $m['id'] = $id;
          
          if($this->input->post('item'))
          {
             $m['item'] = implode(',',$this->input->post('item'));
          }
          
           $uploaded    = $this->upload->do_upload('image');
            if ($id){
                if($this -> input -> post('del_image')){
                    $img_name = $this -> input -> post('hid_image');
                    @unlink('img/products/'.$img_name);
                    $m['image'] = '';
                }
            }

            if($uploaded)
            {
                $image          = $this->upload->data();
                $m['image']   = $image['file_name'];
            }//else{
                //
            $id = $this -> Master_model -> save($m, 'package');
            $this -> session -> set_flashdata("success", "Package created successfully");
            redirect(admin_url('products/create_package/' . $id));
        }else {
            $this->load->view (admin_view ('default'), $this->data);
        }
         

    }
    function add_item($id=false){
      
     if($id=='')
     {
        redirect(admin_url('products/package'));
     }
        $this -> data['item']='';
        $this -> data['id']=$id; 
        $this -> data['main'] = admin_view('products/add_item');
         if($this->input->post('pr_name')){

            $p=$this->input->post('pr_name');
           
           
           $this -> data['item'] = $this->db->get_where('products',array('ptitle'=>$p))->result();
        }

        if($this->input->post('add_item')){
           $itm =  $this->input->post('frm');
           $itm['id'] = false;
           $itm['packid']= $id;
           $this -> Master_model -> save($itm, 'pack_item');
            $this -> session -> set_flashdata("success", "Item  added successfully");
        }
         $this -> data['product'] = $this->db->get_where('pack_item',array('packid'=>$id))->result();
        $this->load->view(admin_view('default'), $this -> data);
    }
    

     function deletep(){
        $pid=$this->input->get('pid');
          $pkd=$this->input->get('pkd');
            $this -> Master_model -> delete($pid, 'pack_item');
            $this -> session -> set_flashdata("success", "Item deleted");
      
        redirect(admin_url('products/add_item/' .$pkd));
          
    }
    function pincode_upload(){
        //print_r($_FILES);
        $config = array();
        $config['upload_path'] = upload_dir();
        $config['allowed_types'] = 'txt|pdf';
        $config['max_size'] = 200;
        $config['remove_spaces'] = TRUE;
        $this->load->library('upload', $config);
        $uploaded = $this -> upload -> do_upload('pincode');
        //$p['pincodes'] = '';
        $p = array();
        if($uploaded){
            $file_name = $this -> upload -> data('file_name');
            $this -> load -> helper("file");
            $string = file_get_contents('./temp/' . $file_name);
            $p['pincodes'] = $string;
            $this -> Product_model -> updateAll($p);
			$this -> session -> set_flashdata('success', 'Pincode updated Successfully');
            redirect(admin_view('products'));
        }
		else{
			$this -> session -> set_flashdata('error', $this -> upload -> display_errors());
			redirect(admin_view('products/upload_pin'));
			//echo $this -> upload -> display_errors();
		}

    }
    function mobile_models(){
        $brand_id = $this -> input -> post('brand_id');
        $m = $this -> Mobile_model -> get_models($brand_id);
        if(is_array($m) && count($m) > 0){ ?>
            <?php foreach($m as $id => $title){
                ?>
                <option value="<?= $id; ?>"><?= $title; ?></option>
            <?php
            }
        }
    }

    function activate($id = false){
        $redirect = isset($_GET['redirect_to']) ? $_GET['redirect_to'] : admin_url('products');
        if($id){
            $c['id'] = $id;
            $c['status'] = 1;
            $this -> Product_model -> save($c);
            $this -> session -> set_flashdata("success", "Product activated");
        }
        redirect($redirect);
    }

    function deactivate($id = false){
        $redirect = isset($_GET['redirect_to']) ? $_GET['redirect_to'] : admin_url('products');
        if($id){
            $c['id'] = $id;
            $c['status'] = 0;
            $this -> Product_model -> save($c);
            $this -> session -> set_flashdata("success", "Product deactivated");
        }
        redirect($redirect);
    }

    function del_designs($id = false){
        if($id){
            $this -> Master_model -> delete($id, 'designs');
            $this -> session -> set_flashdata("success", "Design deleted");
        }
        redirect(admin_url('products/designs'));
    }

    /*function delete($id = false){
        if($id){
            $this -> Product_model -> delete($id, 'products');
            $this -> Product_model -> deletepcat($id, 'products_categories');
            $this -> session -> set_flashdata("success", "Product delete successfully");
        }
        redirect(admin_url('products'));
    }*/

    public function delete($id = false){
        $data['status'] = 1;
        if($id){
            $this -> Product_model -> delete($id);
            $this -> Product_model -> delete_p_cat($id);
            $this -> session -> set_flashdata('success', 'Products deleted successfully');
        }else{
            $ids = $this -> input -> post('ids');
            if(is_array($ids)){
                foreach($ids as $id){
                    $this -> Product_model -> delete($id);
                    $this -> Product_model -> delete_p_cat($id);
                }
            }
            $this -> session -> set_flashdata('success', 'Bulk Products deleted');
        }
        redirect('admin/products');
    }

    function export_selected($id = false){ 
        $data['status'] = 1;
		$this -> db -> select('id, ptitle, slug, description, fit_details, fabric_details, delivery_info, short_description, sizes, size_price, price, sale_price, image, gallery, min_order, max_order, status, created, params, meta_title, meta_description, meta_keywords, qty, discount_type, discount, discount_rate, available, ship_charge, ship_notes, pincodes, brand_id, models, material, theme, specification, highlights, customize, product_type, cod, feature, sequence, sku, design_code, model_code, name, event, is_printed');
        if($id){
           
            $this -> session -> set_flashdata('success', 'Products Exported successfully');
        }else{
            $ids = $this -> input -> post('ids');
            //print_r($ids); //exit();
            $this->load->dbutil();
            $this->load->helper('file');
            $this->load->helper('download');
			ini_set('memory_limit','1024M');
            $delimiter = ",";
            $newline = "\r\n";
            $filename = "products.csv";
            $this ->db -> where_in('id',$ids);
            $result = $this -> db -> get('products');
            //$query = "SELECT * FROM products order by id DESC";
            //$result = $this->db->query($query);
            $data = $this->dbutil->csv_from_result($result, $delimiter, $newline);
            force_download($filename, $data);
            //$this->Stock_manage_model->ExportCSV();
            redirect(admin_url('products'));
            /*if(is_array($ids)){
                foreach($ids as $id){
                    $this -> Product_model -> delete($id);
                    $this -> Product_model -> delete_p_cat($id);
                }
            }*/
            $this -> session -> set_flashdata('success', 'Bulk Products exported');
        }
        redirect('admin/products');
    }
	
	function export_all(){
        $data['status'] = 1;
            $this->load->dbutil();
            $this->load->helper('file');
            $this->load->helper('download');
            ini_set('memory_limit','1024M');
            $delimiter = ",";
            $newline = "\r\n";
            $filename = "products.csv";
            $result = $this -> db -> get('products');
            $data = $this->dbutil->csv_from_result($result, $delimiter, $newline);
            force_download($filename, $data);
            redirect(admin_url('products'));
            $this -> session -> set_flashdata('success', 'Bulk Products deleted');
        redirect('admin/products');
    }


    function ajax_upload(){
        $config = array();
        $config['upload_path'] = upload_dir();
        $config['allowed_types'] = '*';
        $config['max_size'] = '0';
        $d['msg'] = '';
        $this->load->library('upload', $config);
        if($this -> input -> post('submit')){
            $total = count($_FILES['filesToUpload']['name']);
            $files = $_FILES;
            for($i = 0; $i < $total; $i++){
                $_FILES['filesToUpload']['name']= $files['filesToUpload']['name'][$i];
                $_FILES['filesToUpload']['type']= $files['filesToUpload']['type'][$i];
                $_FILES['filesToUpload']['tmp_name']= $files['filesToUpload']['tmp_name'][$i];
                $_FILES['filesToUpload']['error']= $files['filesToUpload']['error'][$i];
                $_FILES['filesToUpload']['size']= $files['filesToUpload']['size'][$i];

                if($this -> upload -> do_upload('filesToUpload')) {
                    $save = $this -> upload -> data();
                    $save['id'] = false;
                    $save['img_title']		= "Untitled";
                    $save['img_alt']		= "Untitled";
                    $this-> Media_model -> save($save);
                }
                else
                {
                    //echo $this -> upload -> display_errors();
                }
            }
            $d['msg'] = "File uploaded successfully";
        }
        $this -> load -> view(admin_view('products/ajax-upload'), $d);
    }

    function filter_img($q = ''){
        $imglist = $this -> Media_model -> filter_img($q);
        if($q == ''){
            $imglist = $this -> Media_model -> allimages();
        }
        if(is_array($imglist) && count($imglist) > 0){
            foreach($imglist as $imob){
                ?>
                <li><img src="<?= base_url(upload_dir($imob -> file_name)); ?>" class="img-thumbnail img-responsive img-popup" /> </li>
            <?php
            }
        }else{
            ?>
            <li style="width: 100%">
                <div class="alert alert-danger">NO FILE FOUND</div>
            </li>
        <?php
        }
    }

    function ajaximgdel(){
        $imgsrc = $this -> input -> post('imgsrc');
        $str['id']=$this->input->post('pid');
        $m=$this->Product_model->getProduct($str['id']);
        if($m -> gallery <> '') {
            $str['gallery'] = str_replace($imgsrc . ',', '', $m -> gallery);
        }
        $this -> Product_model -> save($str);
        echo true;
    }

    function ajaxLoadCategory($product_type){
        $p = $this -> Category_model -> get_categories_tierd(0, $product_type);
        $this -> list_categories($p, '', array());
    }

    function list_categories($cats, $sub='', $pcats) {
        foreach ($cats as $cat):?>
            <li><label class="checkbox checkbox-inline"><input type="checkbox" name="cats[]" value="<?php echo  $cat['category'] -> id; ?>" <?php if(in_array($cat['category'] -> id, $pcats)) echo ' checked'; ?> /><?php echo  $sub.$cat['category'] -> name; ?></label> </li>
            <?php
            if (sizeof($cat['children']) > 0)
            {
                $sub2 = str_replace('&rarr;&nbsp;', '&nbsp;', $sub);
                $sub2 .=  '&nbsp;&nbsp;&nbsp;&rarr;&nbsp;';
                $this -> list_categories($cat['children'], $sub2, $pcats);
            }
        endforeach;
    }

    function import_files(){
        $this -> data['main'] = admin_view('products/import-file');
        if($this -> input -> post('import_btn')){
            $count = 0;
            if($_FILES['excel_file']['name'] <> ''){
                $fn = $_FILES['excel_file']['tmp_name'];
                $file = fopen($fn, "r");
                while(($tp = fgetcsv($file, 10000, ",")) !== FALSE){
                    $count++;
                    if($count > 1) {
                        $this -> check_nd_update($tp);
                        // echo "hi".$this->db->last_query();
                    } 
                }
            }
        }
        $this -> load -> view(admin_view('default'), $this -> data);
    }

    function check_nd_update($tp){
        $data = array();
        $data['id'] = false;
        $data['product_type']=$tp[1];
        if($tp[1]==""){
            //if($tp[1]=="" && $tp[2]==""){
            $this -> session -> set_flashdata('error', "Product Main Category and a child category must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $cate_name1=$tp[2];
        $cate_name2=$tp[3];
        $cate_name3=$tp[4];
        $data['sku'] = $tp[5];
        if($tp[5]==""){
            $this -> session -> set_flashdata('error', "Product SKU must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['ptitle'] = $tp[6];
        if($tp[6]==""){
            $this -> session -> set_flashdata('error', "Product Title must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $slug = $tp[7];
        if(trim($slug) == ''){
            $slug = $tp[6];
        }
        $data['slug'] = url_title($slug);
        $data['price'] = $tp[8];
        if($tp[8]==""){
            $this -> session -> set_flashdata('error', "Price must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['sale_price'] = $tp[9];
        $data['qty'] = $tp[10];
        if($tp[10]==""){
            $this -> session -> set_flashdata('error', "Quantity must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['ship_charge'] = $tp[11];
        $data['cod'] = $tp[12];
        if($tp[12]==""){
            $this -> session -> set_flashdata('error', "COD must not be blank");
            redirect(admin_url('products/import_files'));
        }
        //print_r($data); exit();
        if($tp[1]==3)
        {
            $data['fit_details'] = $tp[13];
            $data['fabric_details'] = $tp[14];
            $data['sizes'] = $tp[20];
            if($tp[20]=="")
            {
                $this -> session -> set_flashdata('error', "Size must not be blank");
                redirect(admin_url('products/import_files'));
            }
            $data['size_price'] = $tp[21];
        }
        $data['description'] = $tp[17];
        $data['delivery_info'] = $tp[18];
        $data['short_description'] = $tp[19];
        $data['image']= $tp[22];
        if($tp[22]=="")
        {
            $this -> session -> set_flashdata('error', "Main Image must not be blank");
            redirect(admin_url('products/import_files'));
        }
        //$image1=$image2=$image3=$image4=$image5="";
        if(!$tp[23]==""){ $image1 = $tp[23]; } else { $image1=""; }
        if(!$tp[24]==""){ $image2 = ','.$tp[24]; } else { $image2=""; }
        if(!$tp[25]==""){ $image3 = ','.$tp[25]; } else { $image3=""; }
        if(!$tp[26]==""){ $image4 = ','.$tp[26]; } else { $image4=""; }
        if(!$tp[27]==""){ $image5 = ','.$tp[27]; } else { $image5=""; }
        $data2['gallery'] = $image1 . $image2 . $image3 . $image4 . $image5;
        $st = str_replace(',,',',',$data2['gallery']);
        $st = str_replace(',,,',',',$data2['gallery']);
        $data['gallery'] = trim($st, ',');

        $data['min_order'] = $tp[28];
        $data['max_order'] = $tp[29];
        $data['status']= $tp[30];
        if($tp[30]=="")
        {
            $this -> session -> set_flashdata('error', "Status must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['created'] = date('Y-m-d H:i:s');
        $data['params'] = $tp[31];
        $data['meta_title'] = $tp[32];
        $data['meta_description']= $tp[33];
        $data['meta_keywords']=$tp[34];
        $data['discount_type'] = $tp[35];
        $data['discount']= $tp[36];
        $data['discount_rate']=$tp[37];
        $data['available']= $tp[38];
        $data['ship_notes'] = $tp[39];
        //$data['pincodes']= $tp[38];
        $file_name = $tp[40];
        if(!$file_name=="")
        {
            if(is_numeric($file_name))
            {
                $data['pincodes'] = $file_name;
            }
            else
            {
                $url = upload_dir($file_name);
                if (file_exists($url))
                {
                    $string = file_get_contents($url);
                    $data['pincodes'] = $string;
                }
            }
        }

        if($tp[1]==5)
        {
            $data['specification']=$tp[15];
            $data['highlights'] = $tp[16];
            $data2['brand_name'] = $tp[41];
            $brand_name = $data2['brand_name'];
            if($tp[41]=="")
            {
                $this -> session -> set_flashdata('error', "Brand Name must not be blank");
                redirect(admin_url('products/import_files'));
            }
            $data3['models'] = $tp[42];
            $models = $data3['models'];
            if($tp[42]=="")
            {
                $this -> session -> set_flashdata('error', "Model Name must not be blank");
                redirect(admin_url('products/import_files'));
            }
            $data['material'] = $tp[43];
            $data['theme'] = $tp[44];
            $brand_id = $this->Mobile_model->get_brand_id_by_name($brand_name);
            //echo $brand_id; exit();
            $data['brand_id']= $brand_id;
            
            $models1 = $this->Mobile_model->get_model_id_by_brand_id($brand_id, $models);
            //print_r($models1); exit();
            if(is_object($models1)){
        	$data['models']= $models1->id;
            	//print_r($data['models']);
        	}
            
            
        }
        $data['customize']= $tp[45];
        if($tp[45]==""){
            $this -> session -> set_flashdata('error', "Customization must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['product_type']=$tp[46];
        $data['feature'] = $tp[47];
        if(!isset($data['brand_id']) || $data['brand_id'] == 0){
              echo "Error: " . $data['sku']; exit();
        }
		$data['sequence'] = $tp[48];
		$data['event'] = $tp[49];
        $data['is_printed'] = $tp[50];
        $pid = $this -> Product_model -> saveProduct($data);
        $cid_exists = $this->Category_model ->get_category_exist($pid, $tp[1]);
        if(is_array($cid_exists) && count($cid_exists) > 0){

        }
        else {
            $this->db->insert('products_categories', array('pid' => $pid, 'cid' => $tp[1]));
        }
        
        $cid_exist = $this->Category_model ->get_category_exist($pid, $tp[2]);
        if(is_array($cid_exist) && count($cid_exist) > 0){

        }
        else{
            $this -> db -> insert('products_categories', array('pid' => $pid, 'cid' => $tp[2]));
        }

        $cid_exist = $this->Category_model ->get_category_exist($pid, $tp[3]);
        if(is_array($cid_exist) && count($cid_exist) > 0){

        }
        else{
            $this -> db -> insert('products_categories', array('pid' => $pid, 'cid' => $tp[3]));
        }

        $cid_exist = $this->Category_model ->get_category_exist($pid, $tp[4]);
        if(is_array($cid_exist) && count($cid_exist) > 0){

        }
        else{
            $this -> db -> insert('products_categories', array('pid' => $pid, 'cid' => $tp[4]));
           
        }

        $this -> session -> set_flashdata('success', "Data Imported Successfully");
        //endif;
        /*if($this -> Product_model -> check_duplicate($data['id'], $data['ptitle']) == false){
            $this -> Product_model -> saveProduct($data);
            $this -> session -> set_flashdata('success', "Data Imported Successfully");
        }*/
    }
	
	function update_files(){
        $this -> data['main'] = admin_view('products/update-product-file');
        if($this -> input -> post('import_btn')){
            $count = 0;
            if($_FILES['excel_file']['name'] <> ''){
                $fn = $_FILES['excel_file']['tmp_name'];
                $file = fopen($fn,"r");
                while(($tp = fgetcsv($file, 10000, ",")) !== FALSE){
                    $count++;
                    if($count > 1){
                        $this -> check_and_update($tp);
                    }
                }
                $this->session->set_flashdata('success', "Data Imported Successfully");
                redirect(admin_url('products/update_files'));
            }
        }
        $this -> load -> view(admin_view('default'), $this -> data);
    }

    function check_and_update($tp){
        $data = array();
        $data['id'] = $tp[0];
        $data['product_type']=$tp[38];
        if($tp[38]==""){
            $this -> session -> set_flashdata('error', "Product Main Category and a child category must not be blank");
            redirect(admin_url('products/import_files'));
        }
        $data['ptitle'] = $tp[1];
        $data['slug'] = $tp[2];
        $data['description'] = $tp[3];
        $data['fit_details'] = $tp[4];
        $data['fabric_details'] = $tp[5];
        $data['delivery_info'] = $tp[6];
        $data['short_description'] = $tp[7];
        $data['sizes'] = $tp[8];
        $data['size_price'] = $tp[9];
        $data['price'] = $tp[10];
        $data['sale_price'] = $tp[11];
        $data['image'] = $tp[12];
        $data['gallery'] = $tp[13];
        $data['min_order'] = $tp[14];
        $data['max_order'] = $tp[15];
        $data['status'] = $tp[16];
        $data['created'] = $tp[17];
        $data['params'] = $tp[18];
        $data['meta_title'] = $tp[19];
        $data['meta_description'] = $tp[20];
        $data['meta_keywords'] = $tp[21];
        $data['qty'] = $tp[22];
        $data['discount_type'] = $tp[23];
        $data['discount'] = $tp[24];
        $data['discount_rate'] = $tp[25];
        $data['available'] = $tp[26];
        $data['ship_charge'] = $tp[27];
        $data['ship_notes'] = $tp[28];
        $data['pincodes'] = $tp[29];
        $data['brand_id'] = $tp[30];
        $data['models'] = $tp[31];
        $data['material'] = $tp[32];
        $data['theme'] = $tp[33];
        $data['specification'] = $tp[34];
        $data['highlights'] = $tp[35];
        $data['customize'] = $tp[36];
        $data['product_type'] = $tp[37];
        $data['cod'] = $tp[38];
        $data['feature'] = $tp[39];
        $data['sequence'] = $tp[40];
        $data['sku'] = $tp[41];
        $data['design_code'] = $tp[42];
        $data['model_code'] = $tp[43];
        $data['name'] = $tp[44];
        $data['event'] = $tp[45];
        $data['is_printed'] = $tp[46];
        /*$data['ptitle'] = $tp[1];
        $data['slug'] = $tp[2];
        $data['description'] = $tp[3];
        $data['delivery_info'] = $tp[6];
        $data['short_description'] = $tp[7];
        $data['sku'] = $tp[10];
        $data['price'] = $tp[11];
        $data['sale_price'] = $tp[12];
        $data['image'] = $tp[13];
        $data['gallery'] = $tp[14];
        $data['min_order'] = $tp[15];
        $data['max_order'] = $tp[16];
        $data['status'] = $tp[17];
        //$data['created'] = $tp[18];
        $data['meta_title'] = $tp[20];
        $data['meta_description'] = $tp[21];
        $data['meta_keywords'] = $tp[22];
        $data['qty'] = $tp[23];
        $data['discount_type'] = $tp[24];
        $data['discount'] = $tp[25];
        $data['discount_rate'] = $tp[26];
        $data['available'] = $tp[27];
        $data['ship_charge'] = $tp[28];
        $data['ship_notes'] = $tp[29];
        //$data['pincodes'] = $tp[30];
        $data['brand_id'] = $tp[30];
        $data['models'] = $tp[31];
        $data['material'] = $tp[32];
        $data['theme'] = $tp[33];
        $data['specification'] = $tp[34];
        $data['highlights'] = $tp[35];
        $data['customize'] = $tp[36];
        $data['product_type'] = $tp[37];
        $data['cod'] = $tp[38];
        $data['feature'] = $tp[39];
        $data['sequence'] = $tp[40];
		$data['event'] = $tp[41];
		$data['is_printed'] = $tp[42];*/

        //print_r($data);die;
        $pid = $this -> Product_model -> saveProduct($data);

        

    }

    
    function export(){
        $this->load->dbutil();
        $this->load->helper('file');
        $this->load->helper('download');
        $delimiter = ",";
        $newline = "\r\n";
        $filename = "products.csv";
        $query = "SELECT * FROM products order by id DESC";
        $result = $this->db->query($query);
        $data = $this->dbutil->csv_from_result($result, $delimiter, $newline);
        force_download($filename, $data);
        //$this->Stock_manage_model->ExportCSV();
        redirect(admin_url('stock_manage'));
    }


    function getclothBrands(){
        $brands = $this->Product_model->field_dropdown('cloths_brand');
        echo form_dropdown("frm[brand_id]",$brands,'',array("class"=>"form-control"));
    }

    function getgroceryBrands(){
        $brands = $this->Product_model->field_dropdown('grocery_brand');
        echo form_dropdown("frm[brand_id]",$brands,'',array("class"=>"form-control"));
    }

    function getmarbleBrands(){
        $brands = $this->Product_model->field_dropdown('marble_brands');
        echo form_dropdown("frm[brand_id]",$brands,'',array("class"=>"form-control"));
    }

    function gethealthBrands(){
        $brands = $this->Product_model->field_dropdown('health_brands');
        echo form_dropdown("frm[brand_id]",$brands,'',array("class"=>"form-control"));
    }
    
    function getelectronicBrands(){
        $brands = $this->Product_model->field_dropdown('electronic_brands');
        echo form_dropdown("frm[brand_id]",$brands,'',array("class"=>"form-control"));
    }
   

}

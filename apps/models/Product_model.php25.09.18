<?php
class Product_model extends Master_model{
	public function __construct(){
		parent::__construct();
		$this -> table = 'products';
	}

    function isExists($p_id){
        $c = $this -> db -> get_where($this -> table, array('id' => $p_id)) -> num_rows();
        if($c == 0){
            return FALSE;
        }else{
            return TRUE;
        }
    }

    function delete_p_cat($id){
        $this -> db -> delete('products_categories', array('pid' => $id));
    }

	function resetCategory($pid, $cats = array()){
		$this -> db -> delete('products_categories', array('pid' => $pid));
		foreach($cats as $cid){
			$p = array(
				'pid' => $pid,
				'cid' => $cid
			);
			$this -> db -> insert('products_categories', $p);
		}
	}

	function getProduct($id){
		$p = $this -> getRow($id);
		$cats_arr = $this -> db -> get_where('products_categories', array('pid' => $id)) -> result();
		if(is_array($cats_arr) && count($cats_arr) > 0){
			$temp = array();
			foreach($cats_arr as $c){
				$temp[] = $c -> cid;
			}
		}else{
			$temp = array();
		}
		$p -> cats = $temp;
		if($p -> sizes <> ''){
			$p -> sizes = json_decode($p -> sizes);
		}else{
			$p -> sizes = array();
		}
		if($p -> params <> ''){
			$p -> params = json_decode($p -> params);
		}else{
			$p -> params = array();
		}
		return $p;
	}

	function getNew($table = false){
		$p = parent::getNew();
		$p -> cats = array();
		$p -> sizes = array();
		return $p;
	}

    function check_duplicate($id, $ptitle){
        $this -> db -> where(array('id' => $id, 'ptitle' => $ptitle));
        $c = $this -> db -> get('products') -> num_rows();
        if($c > 0){
            return true;
        }else{
            return false;
        }
    }

    function saveProduct($data){
        if($data['id']){
            $this -> db -> update('products', $data, array('id' => $data['id']));
            return $data['id'];
        }else{
            $this -> db -> insert('products', $data);
            return $this -> db -> insert_id();
        }
    }

    function insert_cat_id($tp){
        $row = $this -> db -> get_where('products', array('id' => $tp));
        if($row -> num_rows() == 0){
            $this -> db -> insert('products_categories', array('pid' => $tp[0], 'cid' => $tp[2]));
            //$this -> db -> insert('categories', array('name' => $name, 'product_type' => "5"));
            return $this -> db -> insert_id();
        }else{
            $r = $row -> first_row();
            return $r -> id;
        }
    }
	function updateAll($data)    {        
		$r = $this-> db -> update('pincode_cod', $data);        
		return $r;    
	}
	
    function get_product($brand_id=false){
        return $this -> db -> get_where('products', array('brand_id' => $brand_id)) -> result();
    }
  
   function get_products($cat_id=false){
        return $this -> db -> get_where('products', array('category' => $cat_id)) -> result();
    }
    function getProductsName()
    {
    	$data = $this -> db -> get_where('products', array('status' => 1)) -> result_array();
    	//echo  $this->db->last_query();
    	return $data;
    }
    function field_dropdown($table)
    {
        $data = array(
            0 => 'Select Brands'
        );
        $this->db->order_by('title', "ASC");
        //$this->db->where('product_type', 3);
        $rest = $this->db->get($table);
        if ($rest->num_rows() > 0) {
            foreach ($rest->result() as $r) {
                $tname = ucwords(strtolower($r->title));
                $data[$r->id] = $tname;
                //$data = $this->sub_child($r->id, $tname, $data);
            }
        }
        return $data;
    }

    function get_price($ptype,$id){
        if($ptype == 2){
            $pr = $this->db->get_where('units',array('pid' =>$id))->first_row();
            return $pr;
        }
        else
        {
            return false;
        }
    }

    function get_unit_price($ptype,$id){
        if($ptype == 2){
            $pr = $this->db->get_where('units',array('pid' =>$id))->result();
            return $pr;
        }
        else
        {
            return false;
        }
    }
    function chkwishlist($pid,$uid){
        $data = $this->db->get_where('ai_wishlist',array('user_id'=>$uid,'pid'=>$pid))->num_rows();
        return $data;
    }

}
